name: Nightly Release

on:
  schedule:
    # Runs every day at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes since last nightly
        id: check
        run: |
          # Get the last nightly release date
          LAST_NIGHTLY=$(gh release list --limit 1 --json tagName,createdAt --jq '.[] | select(.tagName | startswith("nightly-")) | .createdAt' || echo "")
          
          if [ -z "$LAST_NIGHTLY" ]; then
            echo "No previous nightly release found, creating first nightly"
            echo "should-release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if there are commits since last nightly
          COMMITS_SINCE=$(git log --since="$LAST_NIGHTLY" --oneline | wc -l)
          
          if [ "$COMMITS_SINCE" -gt 0 ]; then
            echo "Found $COMMITS_SINCE commits since last nightly"
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits since last nightly"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  nightly-release:
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete previous nightly release
        run: |
          # Delete previous nightly release and tag
          gh release delete nightly-latest --yes || true
          git push origin :refs/tags/nightly-latest || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly tag
        run: |
          NIGHTLY_TAG="nightly-$(date +'%Y%m%d')"
          git tag nightly-latest
          git tag $NIGHTLY_TAG
          git push origin nightly-latest
          git push origin $NIGHTLY_TAG
          echo "NIGHTLY_TAG=$NIGHTLY_TAG" >> $GITHUB_ENV

      - name: Run GoReleaser for Nightly
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --config .goreleaser.nightly.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update nightly release
        run: |
          gh release edit nightly-latest \
            --title "Nightly Release ($(date +'%Y-%m-%d'))" \
            --notes "🌙 **Nightly Build - $(date +'%Y-%m-%d')**

          This is an automated nightly release containing the latest changes from the main branch.
          
          **⚠️ Warning**: Nightly builds are experimental and may contain bugs or incomplete features.
          
          **🐳 Docker Images:**
          - \`ghcr.io/wimwenigerkind/wswcli:nightly\`
          - \`ghcr.io/wimwenigerkind/wswcli:nightly-amd64\`
          - \`ghcr.io/wimwenigerkind/wswcli:nightly-arm64\`
          
          **📦 Installation:**
          \`\`\`bash
          # Docker
          docker run --rm ghcr.io/wimwenigerkind/wswcli:nightly --version
          
          # Download binary from assets below
          \`\`\`
          
          **🔗 Links:**
          - [Latest Stable Release](https://github.com/wimwenigerkind/wswcli/releases/latest)
          - [Documentation](https://github.com/wimwenigerkind/wswcli#readme)
          
          ---
          *Built from commit: $(git rev-parse HEAD)*" \
            --prerelease
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}